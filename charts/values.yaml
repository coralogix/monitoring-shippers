global:
  domain: ""
  clusterName: ""
  defaultApplicationName: "otel"
  defaultSubsystemName: "infrastructure"
  logLevel: "warn"

opentelemetry-collector-agent:
  enabled: true
  mode: daemonset
  fullnameOverride: coralogix-opentelemetry
  extraVolumes:
    - name: etcmachineid
      hostPath:
        path: /etc/machine-id
    - name: varlibdbusmachineid
      hostPath:
        path: /var/lib/dbus/machine-id
  extraVolumeMounts:
    - mountPath: /etc/machine-id
      mountPropagation: HostToContainer
      name: etcmachineid
      readOnly: true
    - mountPath: /var/lib/dbus/machine-id
      mountPropagation: HostToContainer
      name: varlibdbusmachineid
      readOnly: true
  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-opentelemetry-key
          key: PRIVATE_KEY
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: "k8s.node.name=$(K8S_NODE_NAME)"

  presets:
    # Configures the Kubernetes Processor to add Kubernetes metadata.
    # Adds the k8sattributes processor to all the pipelines
    # and adds the necessary rules to ClusteRole.
    # Best used with mode = daemonset.
    kubernetesAttributes:
      enabled: true

    # Configures the collector to collect host metrics.
    # Adds the hostmetrics receiver to the metrics pipeline
    # and adds the necessary volumes and volume mounts.
    # Best used with mode = daemonset.
    hostMetrics:
      enabled: true

    # Configures the collector to collect Kubelet metrics.
    # Adds the kubeletstats receiver to the metrics pipeline
    # and adds the necessary rules to ClusteRole.
    # Best used with mode = daemonset.
    kubeletMetrics:
      enabled: true
    
  config:
    extensions:
      k8s_observer:
        auth_type: serviceAccount
        node: ${env:K8S_NODE_NAME}
        observe_pods: true

    receivers:
      receiver_creator/ksm_prometheus:
        watch_observers: [k8s_observer]
        receivers:
          prometheus_simple:
            rule: type == "port" && port == 8080 && pod.name contains "{{ .Release.Name }}-kube-state-metrics" 
            config:
              endpoint: '`endpoint`'

    processors:
      resourcedetection/env:
        detectors: ["system", "env"]
        timeout: 2s
        override: false
        system:
          resource_attributes:
            host.id:
              enabled: true
      resourcedetection/region:
        detectors: ["gcp", "ec2"]
        timeout: 2s
        override: true
        gcp:
          resource_attributes:
            cloud.region:
              enabled: true
            cloud.availability_zone:
              enabled: true
        ec2:
          resource_attributes:
            cloud.region:
              enabled: true
            cloud.availability_zone:
              enabled: true
      metricstransform:
        transforms:
        - include: .*
          match_type: regexp
          action: update
          operations:
            - action: add_label
              new_label: k8s.cluster.name
              new_value: "{{ .Values.global.clusterName }}"
            - action: add_label
              new_label: cx.otel_integration.name
              new_value: "coralogix-integration-helm"
        # Replace node name for kube node info with the name of the target node.
        - include: kube_node_info
          match_type: strict
          action: update
          operations:
            - action: update_label
              label: node
              new_label: k8s.node.name
      filter/metrics:
        metrics:
          include:
            match_type: strict
            metric_names:
              - k8s.node.cpu.utilization
              - k8s.pod.cpu.time
              - k8s.pod.cpu.utilization
              - k8s.pod.network.io
              - k8s.pod.memory.usage
              - k8s.pod.memory.available
              - system.cpu.time
              - system.disk.io
              - system.network.packets
              - system.disk.operations
              - system.memory.usage
              - system.network.io
              - container.cpu.utilization
              - container.cpu.time
              - kube_node_info
              - kube_pod_status_reason
              - kube_pod_status_qos_class

    exporters:
      coralogix:
        timeout: "30s"
        private_key: "${CORALOGIX_PRIVATE_KEY}"
        domain: "{{ .Values.global.domain }}"
        application_name: "{{ .Values.global.defaultApplicationName }}"
        subsystem_name: "{{ .Values.global.defaultSubsystemName }}"
        application_name_attributes:
          - "k8s.namespace.name"
          - "service.namespace"
        subsystem_name_attributes:
          - "k8s.deployment.name"
          - "k8s.statefulset.name"
          - "k8s.daemonset.name"
          - "k8s.cronjob.name"
          - "k8s.job.name"
          - "k8s.container.name"
          - "k8s.node.name"
          - "service.name"

    service:
      telemetry:
        logs:
          level: "{{ .Values.global.logLevel }}"
          encoding: json
      extensions:
      - k8s_observer
      - health_check
      - memory_ballast
      pipelines:
        metrics:
          exporters:
            - coralogix
          processors:
            - filter/metrics
            - k8sattributes
            - resourcedetection/env
            - resourcedetection/region
            - metricstransform
            - memory_limiter
            - batch
          receivers:
            - otlp
            - prometheus
            - hostmetrics
            - receiver_creator/ksm_prometheus

opentelemetry-collector-events:
  enabled: true
  mode: deployment
  fullnameOverride: coralogix-opentelemetry-events

  presets:
    # Configures the Kubernetes Processor to add Kubernetes metadata.
    # Adds the k8sattributes processor to all the pipelines
    # and adds the necessary rules to ClusteRole.
    # Best used with mode = daemonset.
    kubernetesAttributes:
      enabled: true

    # Configures the Kubernetes Cluster Receiver to collect cluster-level metrics.
    # Adds the k8s_cluster receiver to the metrics pipeline
    # and adds the necessary rules to ClusteRole.
    # Best used with mode = deployment or statefulset.
    clusterMetrics:
      enabled: true

  extraEnvs:
    - name: CORALOGIX_PRIVATE_KEY
      valueFrom:
        secretKeyRef:
          name: coralogix-opentelemetry-key
          key: PRIVATE_KEY

  clusterRole:
    create: true
    rules:
      - apiGroups: ["", "events.k8s.io"]
        resources: ["events"]
        verbs: ["watch", "list"]
      - apiGroups:
          - ""
        resources:
          - nodes
          - nodes/metrics
          - endpoints
          - services
        verbs:
          - get
          - list
          - watch
      - nonResourceURLs:
          - "/metrics"
        verbs:
          - get

  config:
    receivers:
      prometheus/kube_extra_metrics:
        config:
          scrape_configs:
          - job_name: kubernetes-apiserver
            honor_timestamps: true
            scheme: https
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            kubernetes_sd_configs:
            - role: endpoints
            relabel_configs:
              - source_labels:
                  [
                    __meta_kubernetes_namespace,
                    __meta_kubernetes_service_name,
                    __meta_kubernetes_endpoint_port_name,
                  ]
                action: keep
                regex: default;kubernetes;https
          - job_name: kubernetes-cadvisor
            honor_timestamps: true
            metrics_path: /metrics/cadvisor
            scheme: https
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: true
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
      k8sobjects:
        objects:
          - group: events.k8s.io
            mode: watch
            name: events
      k8s_cluster:
        collection_interval: 10s
        allocatable_types_to_report: [cpu, memory]

    processors:
      resource/kube-events:
        attributes:
          - key: service.name
            value: "kube-events"
            action: upsert
          - key: k8s.cluster.name
            value: "{{ .Values.global.clusterName }}"
            action: upsert
      resourcedetection/env:
        detectors: ["system", "env"]
        timeout: 2s
        override: false
      resourcedetection/region:
        detectors: ["gcp", "ec2"]
        timeout: 2s
        override: false
        gcp:
          resource_attributes:
            cloud.region:
              enabled: true
            cloud.availability_zone:
              enabled: true
        ec2:
          resource_attributes:
            cloud.region:
              enabled: true
            cloud.availability_zone:
              enabled: true
      metricstransform:
        transforms:
          include: .*
          match_type: regexp
          action: update
          operations:
            - action: add_label
              new_label: k8s.cluster.name
              new_value: "{{ .Values.global.clusterName }}"
            - action: add_label
              new_label: cx.otel_integration.name
              new_value: "{{ .Chart.Name }}"
      filter/metrics:
        metrics:
          include:
            match_type: strict
            metric_names:
              - k8s.node.allocatable_memory
              - k8s.node.allocatable_cpu
              - k8s.pod.phase
              - k8s.container.cpu_limit
              - k8s.container.cpu_request
              - k8s.container.memory_limit
              - k8s.container.memory_request
              - kubernetes_build_info
              - container_fs_writes_total
              - container_fs_writes_bytes_total
              - container_fs_reads_total
              - container_fs_reads_bytes_total
              - container_fs_usage_bytes

    exporters:
      coralogix:
        timeout: "30s"
        private_key: "${CORALOGIX_PRIVATE_KEY}"
        domain: "{{ .Values.global.domain }}"
        application_name: "{{ .Values.global.defaultApplicationName }}"
        subsystem_name: "{{ .Values.global.defaultSubsystemName }}"
        application_name_attributes:
          - "k8s.namespace.name"
          - "service.namespace"
        subsystem_name_attributes:
          - "k8s.deployment.name"
          - "k8s.statefulset.name"
          - "k8s.daemonset.name"
          - "k8s.cronjob.name"
          - "k8s.job.name"
          - "k8s.container.name"
          - "k8s.node.name"
          - "service.name"

    service:
      telemetry:
        logs:
          level: "{{ .Values.global.logLevel }}"
          encoding: json

      pipelines:
        metrics:
          exporters:
            - coralogix
          processors:
            - filter/metrics
            - k8sattributes
            - resourcedetection/env
            - resourcedetection/region
            - metricstransform
            - memory_limiter
            - batch
          receivers:
            - otlp
            - prometheus
            - prometheus/kube_extra_metrics
            - k8s_cluster
        logs/kube-events:
          exporters:
            - coralogix
          processors:
            - memory_limiter
            - batch
            - resource/kube-events
          receivers:
            - k8sobjects

kube-state-metrics:
  enabled: true
  prometheusScrape: false
  collectors:
    - pods
    - nodes
  metricsAllowList:
    - kube_node_info
    - kube_pod_status_reason
    - kube_pod_status_qos_class
